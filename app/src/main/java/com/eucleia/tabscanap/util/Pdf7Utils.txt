package com.eucleia.tabscanap.util;


import com.blankj.utilcode.util.Utils;
import com.eucleia.pdicheck.listener.WritePDF7Listener;
import com.eucleia.pdicheck.net.presenter.PdiWritePDF7PresenterImpl;
import com.eucleia.pdicheck.room.entity.PdiReport;
import com.eucleia.tabscanap.bean.diag.CDispPdiCheckBeanEvent;
import com.eucleia.tabscanap.constant.CharVar;
import com.eucleia.tabscanap.constant.FileVar;
import com.eucleia.tabscanap.constant.PDF7Constant;
import com.eucleia.tabscanap.constant.PathVar;
import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.Color;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.lzy.okgo.utils.IOUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import io.reactivex.Observable;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.schedulers.Schedulers;

public class Pdf7Utils {

    private Pdf7Utils() {
    }

    public void savePdf(CDispPdiCheckBeanEvent event) {
        long time = System.currentTimeMillis();
        File outPDFPath = getOutPDFPath(event.getVin(), time);
        PdiReport report = new PdiReport();
        report.createTime = time;
        report.uploadStatus = 0;
        report.path = outPDFPath.getPath();
        report.vin = event.getVin();
        report.model = event.getModel();
        report.result = event.getResult();
        report.year = event.getYear();
        report.brand = event.getBrand();

        createPDF(outPDFPath, new PdiWritePDF7PresenterImpl(event, report));

    }

    private static class InnerClass {
        private static final Pdf7Utils INSTANCE = new Pdf7Utils();
    }

    public static Pdf7Utils get() {
        return InnerClass.INSTANCE;
    }

    public File getOutPDFPath(String name, long time) {
        File file = new File(SDUtils.getLocalFile(), PathVar.PdfPath);
        if (!file.exists()) {
            file.mkdirs();
        }
        String pdfName = name + CharVar.MINUS + PDFConstant.format.format(time) + FileVar.PdfSuffix;
        return new File(file, pdfName);
    }

    public void createPDF(File pdfFile, WritePDF7Listener listener) {
        Observable.create((ObservableOnSubscribe<String>) emitter -> {
            try {
                if (listener != null) {
                    listener.start();
                }
                FileOutputStream out = new FileOutputStream(pdfFile);
                PdfWriter writer = new PdfWriter(out);
                PdfDocument pdfDocument = new PdfDocument(writer);
                Document doc = new Document(pdfDocument, PageSize.A4);
                doc.setBackgroundColor(PDFConstant.bgColor);
                doc.setMargins(14, 14, 17, 10);
//                doc.setFont(PdfFontFactory.createFont("font/fzktjt.ttf"));
                writer.flush();
                if (listener != null) {
                    listener.writeTo(doc);
                }
                emitter.onComplete();
            } catch (Exception e) {
                emitter.onError(e);
                e.printStackTrace();
            }
        }).subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new BaseObserver<String>() {
                    @Override
                    public void onComplete() {
                        if (listener != null) {
                            listener.complete();
                        }
                    }

                    @Override
                    public void onError(Throwable e) {
                        if (listener != null) {
                            listener.error(e);
                        }
                    }
                });
    }


    public void setPadding(Cell cell, int top, int left, int bottom, int right) {
        cell.setPaddingTop(top);
        cell.setPaddingLeft(left);
        cell.setPaddingBottom(bottom);
        cell.setPaddingRight(right);
    }

    public Cell getPCell() {
        Cell pdfPCell = new Cell();
        return pdfPCell;
    }


    public Cell getPCell(Paragraph paragraph) {
        Cell pdfPCell = new Cell();
        pdfPCell.add(paragraph);
        return pdfPCell;
    }


    public Cell getPCell(String str) {

        Cell pdfPCell = new Cell();
        pdfPCell.add(getParagraph(str));
        pdfPCell.setBackgroundColor(DeviceRgb.WHITE);
        return pdfPCell;
    }

    public Cell getEmptyCell(int size) {
        return getPCell(new Paragraph(CharVar.SPACE));
    }

    public Paragraph getParagraph(String str, int headSize, boolean b, Color mainColor) {
        Paragraph paragraph = new Paragraph(str);
        paragraph.setFontSize(headSize);
        paragraph.setFontColor(mainColor);
        if (b) {
            paragraph.setBold();
        }
        return paragraph;
    }

    public Paragraph getParagraph(String str) {
        return new Paragraph(str);
    }

    public Paragraph getEmptyParagraph(int size) {
        return new Paragraph(CharVar.SPACE);
    }


    public Image getImage(String fileName) throws IOException {
        InputStream open = Utils.getApp().getAssets().open(fileName);
        return new Image(ImageDataFactory.create(IOUtils.toByteArray(open)));
    }


}
